# -*- coding: utf-8 -*-
"""Feature extraction of Text data using Tfidf Vectorizer.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vYlB9J-IXyfdphdETNeg7VHKhA6eBsaH

#About the Dataset


1.   id: unique id for a news article
2.   title: the title of a news article
3.   author: author of the news article
4.   text: the text of the article; cloud be incomplete
5.   label: a label that marks whether the news article is real or fake


> 1: Fake news

> 0: Real mews

#Importing the Dependencies
"""

import numpy as np
import pandas as pd
import re
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
from sklearn.feature_extraction.text import TfidfVectorizer

import nltk
nltk.download('stopwords')

# printing the stopwords in English
print(stopwords.words('english'))

"""#Data Pre-processing"""

# loading the dataset
news_dataset = pd.read_csv('/content/train.csv')

news_dataset.shape

# printing the first 5 rows of the dataframe
news_dataset.head()

# counting the number of missing values in the dataset
news_dataset.isnull().sum()

# replacing the null values with empty string
news_dataset = news_dataset.fillna('')

# merging the author name and news title
news_dataset['content'] = news_dataset['author'] + ' ' + news_dataset['title']

print(news_dataset['content'])

# separating the data & label
X = news_dataset.drop(columns='label', axis=1)
Y = news_dataset['label']

print(X)
print(Y)

"""#Stemming
Stemming is the process of reducing a word to its Root word
example: actor, actress, acting --> act
"""

port_stem = PorterStemmer()

def stemming(content):
  stemmed_content = re.sub('[^a-zA-Z]', ' ', content)
  stemmed_content = stemmed_content.lower()
  stemmed_content = stemmed_content.split()
  stemmed_content = [port_stem.stem(word) for word in stemmed_content
                     if not word in stopwords.words('english')]
  stemmed_content = ' '.join(stemmed_content)
  return stemmed_content

news_dataset['content'] = news_dataset['content'].apply(stemming)

print(news_dataset['content'])

# separating the data and label
X = news_dataset['content'].values
Y = news_dataset['label'].values

print(X)

print(Y)

Y.shape

"""#TF-IDF"""

# convert the textual data to Feature Vectors
vectorizer = TfidfVectorizer()

vectorizer.fit(X)
X = vectorizer.transform(X)

print(X)